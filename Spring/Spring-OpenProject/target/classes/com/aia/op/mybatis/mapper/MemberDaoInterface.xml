<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 자동으로 만들어지는 mapper 객체
	select id는 메소드 이름으로 일치시켜준다
-->
<mapper namespace="com.aia.op.member.dao.MemberDaoInterface">
	
	<!-- select의 결과를 객체에 mapping해준다 : 테이블에 column명과 java beans의 변수의 이름이 다른 경우 -->
	<resultMap type="com.aia.op.member.model.Member" id="resultMember">
		<id property="idx" column="idx"/>	<!-- 테이블의 idx를 Member객체 idx변수에 setIdx 실행 -->
		<id property="uid" column="uid"/>
		<id property="upw" column="upw"/>
		<id property="uname" column="uname"/>
		<id property="uphoto" column="uphoto"/>
	</resultMap>
	
	
	<select id="selectByIdPw" resultType="com.aia.op.member.model.Member">
		select * from project.member where uid=#{param1} and upw=#{param2}
	</select>

	<!-- 검색: id, name, id or name 
		 map.put("searchType", "id"/"name"/"both") 으로 넣기
		 map.put("keyword", uid)
	 -->
 
 	<!-- map - HashMap -->
	<select id="totalCount" parameterType="map" resultType="int">
		select count(*) from project.member
		<!-- <![CDATA[idx<10 and idx>1]]> -->
		<include refid="listSearch"/>
	
	</select>
	
	<select id="selectList" parameterType="map" resultMap="resultMember">
		select * from project.member
		<include refid="listSearch"/>
		limit #{startRow}, #{count}
	</select>
	
	<select id="selectByIdx" resultType="com.aia.op.member.model.Member">
		select * from project.member where idx=#{idx}	<!-- parameter가 하나일때 param 이름은 아무거나 정해줘도 된다 -->
	</select>
	
	<select id="selectListXml" resultType="com.aia.op.member.model.MemberXml">
		select * from project.member order by idx desc
	</select>
	
	<select id="selectListJson" resultMap="resultMember">
		select * from project.member order by idx desc
	</select>
	
	
	<insert id="insertMember" parameterType="com.aia.op.member.model.Member" 
			useGeneratedKeys="true"	
			keyProperty="idx">	<!-- 사용할 파라미터를 설정: parameterType으로 객체를 불러와 준다 -->
		insert into project.member (uid, upw, uname, uphoto) values (#{uid}, #{upw}, #{uname}, #{uphoto})
	</insert>
	
	<delete id="memberDelete" parameterType="int">
		delete from project.member where idx=#{idx}
	</delete>
	
	<!--
	 	<![CDATA[idx<10 and idx>1]]>
		엘리먼트 <>를 엘리먼트의 시작과 끝으로 인식하지 않도록 처리
	-->
	
	<!-- sql: where -->
	<sql id="whereID">
		or uid like concat('%',#{keyword},'%')
	</sql>
	<sql id="whereName">
		or uname like concat('%',#{keyword},'%')
	</sql>
	<!-- sql: listSearch -->
	<sql id="listSearch">
		<where> <!-- 첫 or문은 자동 생략해 줌 -->
			<if test="searchType != null">
				<if test="searchType == 'both'">
					<include refid="whereID"/>
					<include refid="whereName"/>
				</if>
				<if test="searchType == 'id'">
					<include refid="whereID"/>
				</if>
				<if test="searchType == 'name'">
					<include refid="whereName"/>
				</if>
			</if>
		</where>
	</sql>
</mapper>
